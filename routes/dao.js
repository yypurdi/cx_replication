/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */

const mysql = require('mysql');
const mqtt = require('mqtt');
const mybatisMapper = require('mybatis-mapper');

const mqttUsername = 'admin';
const mqttPassword = '1234';
const dbpool = mysql.createPool({
    connectionLimit : 100,
    host: 'localhost',
    user: 'root',
    password : '',
    database: 'cx_replication',
    debug    :  false
});

const createQuery = function(mapper,namespace,method,jsonObj){
    mybatisMapper.createMapper(mapper);
    var format = {language: 'sql', indent: '  '};
    var query = mybatisMapper.getStatement(namespace,method, jsonObj, format);
    return query;
}
    
const options = {
  port: 1883,
  host: 'mqtt://test.mosquitto.org',
  clientId: 'mqttjs_' + Math.random().toString(16).substr(2, 8),
  username: mqttUsername,
  password: mqttPassword,
  keepalive: 60,
  reconnectPeriod: 1000,
  protocolId: 'MQTT',
  clean: true,
  encoding: 'utf8'
};

const connector = mqtt.connect("mqtt://localhost",options);

connector.on('connect', function () {
  console.log('Connected to middleware ('+options.host+':'+options.port+')');
  connector.subscribe('sensor/'+mqttUsername+'/post');
});

module.exports = {

    Dao: class Dao {

        constructor() {
            this.connector = connector;
        }
          
        getMqttConnector(){
            return this.connector;
        }

        searchAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesSearchMapper.xml'], 'searchAppAuthoritiesMapper', 'searchAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactSearchMapper.xml'], 'searchAppContactMapper', 'searchAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesSearchMapper.xml'], 'searchAppGroupAuthoritiesMapper', 'searchAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersSearchMapper.xml'], 'searchAppGroupMembersMapper', 'searchAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsSearchMapper.xml'], 'searchAppGroupsMapper', 'searchAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusSearchMapper.xml'], 'searchAppMenusMapper', 'searchAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageSearchMapper.xml'], 'searchAppMessageMapper', 'searchAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsSearchMapper.xml'], 'searchAppPersistentLoginsMapper', 'searchAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomSearchMapper.xml'], 'searchAppRoomMapper', 'searchAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersSearchMapper.xml'], 'searchAppUsersMapper', 'searchAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchCcontactAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CcontactAllSearchMapper.xml'], 'searchCcontactAllMapper', 'searchCcontactAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchContrDevices(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrDevicesSearchMapper.xml'], 'searchContrDevicesMapper', 'searchContrDevices', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchContrServicesCap(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrServicesCapSearchMapper.xml'], 'searchContrServicesCapMapper', 'searchContrServicesCap', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchContractAll(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractAllSearchMapper.xml'], 'searchContractAllMapper', 'searchContractAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchContractHistory(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractHistorySearchMapper.xml'], 'searchContractHistoryMapper', 'searchContractHistory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchCustomerAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CustomerAllSearchMapper.xml'], 'searchCustomerAllMapper', 'searchCustomerAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchDirectoryNumber(jsonObj, callback) {
            var query = createQuery(['./mapper/DirectoryNumberSearchMapper.xml'], 'searchDirectoryNumberMapper', 'searchDirectoryNumber', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchInfoContrCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrCheckSearchMapper.xml'], 'searchInfoContrCheckMapper', 'searchInfoContrCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchInfoContrCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrComboSearchMapper.xml'], 'searchInfoContrComboMapper', 'searchInfoContrCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchInfoContrText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrTextSearchMapper.xml'], 'searchInfoContrTextMapper', 'searchInfoContrText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchInfoCustCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustCheckSearchMapper.xml'], 'searchInfoCustCheckMapper', 'searchInfoCustCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchInfoCustCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustComboSearchMapper.xml'], 'searchInfoCustComboMapper', 'searchInfoCustCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchInfoCustText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustTextSearchMapper.xml'], 'searchInfoCustTextMapper', 'searchInfoCustText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchOrderhdrAll(jsonObj, callback) {
            var query = createQuery(['./mapper/OrderhdrAllSearchMapper.xml'], 'searchOrderhdrAllMapper', 'searchOrderhdrAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchOrdertrailer(jsonObj, callback) {
            var query = createQuery(['./mapper/OrdertrailerSearchMapper.xml'], 'searchOrdertrailerMapper', 'searchOrdertrailer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchPort(jsonObj, callback) {
            var query = createQuery(['./mapper/PortSearchMapper.xml'], 'searchPortMapper', 'searchPort', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchPrServSpcodeHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServSpcodeHistSearchMapper.xml'], 'searchPrServSpcodeHistMapper', 'searchPrServSpcodeHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchPrServStatusHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServStatusHistSearchMapper.xml'], 'searchPrServStatusHistMapper', 'searchPrServStatusHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchProfileService(jsonObj, callback) {
            var query = createQuery(['./mapper/ProfileServiceSearchMapper.xml'], 'searchProfileServiceMapper', 'searchProfileService', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        searchStorageMedium(jsonObj, callback) {
            var query = createQuery(['./mapper/StorageMediumSearchMapper.xml'], 'searchStorageMediumMapper', 'searchStorageMedium', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesReadMapper.xml'], 'readAppAuthoritiesMapper', 'readAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactReadMapper.xml'], 'readAppContactMapper', 'readAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesReadMapper.xml'], 'readAppGroupAuthoritiesMapper', 'readAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersReadMapper.xml'], 'readAppGroupMembersMapper', 'readAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsReadMapper.xml'], 'readAppGroupsMapper', 'readAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusReadMapper.xml'], 'readAppMenusMapper', 'readAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageReadMapper.xml'], 'readAppMessageMapper', 'readAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsReadMapper.xml'], 'readAppPersistentLoginsMapper', 'readAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomReadMapper.xml'], 'readAppRoomMapper', 'readAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersReadMapper.xml'], 'readAppUsersMapper', 'readAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readCcontactAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CcontactAllReadMapper.xml'], 'readCcontactAllMapper', 'readCcontactAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readContrDevices(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrDevicesReadMapper.xml'], 'readContrDevicesMapper', 'readContrDevices', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readContrServicesCap(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrServicesCapReadMapper.xml'], 'readContrServicesCapMapper', 'readContrServicesCap', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readContractAll(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractAllReadMapper.xml'], 'readContractAllMapper', 'readContractAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readContractHistory(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractHistoryReadMapper.xml'], 'readContractHistoryMapper', 'readContractHistory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readCustomerAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CustomerAllReadMapper.xml'], 'readCustomerAllMapper', 'readCustomerAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readDirectoryNumber(jsonObj, callback) {
            var query = createQuery(['./mapper/DirectoryNumberReadMapper.xml'], 'readDirectoryNumberMapper', 'readDirectoryNumber', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readInfoContrCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrCheckReadMapper.xml'], 'readInfoContrCheckMapper', 'readInfoContrCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readInfoContrCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrComboReadMapper.xml'], 'readInfoContrComboMapper', 'readInfoContrCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readInfoContrText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrTextReadMapper.xml'], 'readInfoContrTextMapper', 'readInfoContrText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readInfoCustCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustCheckReadMapper.xml'], 'readInfoCustCheckMapper', 'readInfoCustCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readInfoCustCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustComboReadMapper.xml'], 'readInfoCustComboMapper', 'readInfoCustCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readInfoCustText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustTextReadMapper.xml'], 'readInfoCustTextMapper', 'readInfoCustText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readOrderhdrAll(jsonObj, callback) {
            var query = createQuery(['./mapper/OrderhdrAllReadMapper.xml'], 'readOrderhdrAllMapper', 'readOrderhdrAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readOrdertrailer(jsonObj, callback) {
            var query = createQuery(['./mapper/OrdertrailerReadMapper.xml'], 'readOrdertrailerMapper', 'readOrdertrailer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readPort(jsonObj, callback) {
            var query = createQuery(['./mapper/PortReadMapper.xml'], 'readPortMapper', 'readPort', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readPrServSpcodeHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServSpcodeHistReadMapper.xml'], 'readPrServSpcodeHistMapper', 'readPrServSpcodeHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readPrServStatusHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServStatusHistReadMapper.xml'], 'readPrServStatusHistMapper', 'readPrServStatusHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readProfileService(jsonObj, callback) {
            var query = createQuery(['./mapper/ProfileServiceReadMapper.xml'], 'readProfileServiceMapper', 'readProfileService', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        readStorageMedium(jsonObj, callback) {
            var query = createQuery(['./mapper/StorageMediumReadMapper.xml'], 'readStorageMediumMapper', 'readStorageMedium', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesNewMapper.xml'], 'newAppAuthoritiesMapper', 'newAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactNewMapper.xml'], 'newAppContactMapper', 'newAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesNewMapper.xml'], 'newAppGroupAuthoritiesMapper', 'newAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersNewMapper.xml'], 'newAppGroupMembersMapper', 'newAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsNewMapper.xml'], 'newAppGroupsMapper', 'newAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusNewMapper.xml'], 'newAppMenusMapper', 'newAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageNewMapper.xml'], 'newAppMessageMapper', 'newAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsNewMapper.xml'], 'newAppPersistentLoginsMapper', 'newAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomNewMapper.xml'], 'newAppRoomMapper', 'newAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersNewMapper.xml'], 'newAppUsersMapper', 'newAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newCcontactAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CcontactAllNewMapper.xml'], 'newCcontactAllMapper', 'newCcontactAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newContrDevices(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrDevicesNewMapper.xml'], 'newContrDevicesMapper', 'newContrDevices', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newContrServicesCap(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrServicesCapNewMapper.xml'], 'newContrServicesCapMapper', 'newContrServicesCap', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newContractAll(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractAllNewMapper.xml'], 'newContractAllMapper', 'newContractAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newContractHistory(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractHistoryNewMapper.xml'], 'newContractHistoryMapper', 'newContractHistory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newCustomerAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CustomerAllNewMapper.xml'], 'newCustomerAllMapper', 'newCustomerAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newDirectoryNumber(jsonObj, callback) {
            var query = createQuery(['./mapper/DirectoryNumberNewMapper.xml'], 'newDirectoryNumberMapper', 'newDirectoryNumber', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newInfoContrCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrCheckNewMapper.xml'], 'newInfoContrCheckMapper', 'newInfoContrCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newInfoContrCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrComboNewMapper.xml'], 'newInfoContrComboMapper', 'newInfoContrCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newInfoContrText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrTextNewMapper.xml'], 'newInfoContrTextMapper', 'newInfoContrText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newInfoCustCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustCheckNewMapper.xml'], 'newInfoCustCheckMapper', 'newInfoCustCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newInfoCustCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustComboNewMapper.xml'], 'newInfoCustComboMapper', 'newInfoCustCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newInfoCustText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustTextNewMapper.xml'], 'newInfoCustTextMapper', 'newInfoCustText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newOrderhdrAll(jsonObj, callback) {
            var query = createQuery(['./mapper/OrderhdrAllNewMapper.xml'], 'newOrderhdrAllMapper', 'newOrderhdrAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newOrdertrailer(jsonObj, callback) {
            var query = createQuery(['./mapper/OrdertrailerNewMapper.xml'], 'newOrdertrailerMapper', 'newOrdertrailer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newPort(jsonObj, callback) {
            var query = createQuery(['./mapper/PortNewMapper.xml'], 'newPortMapper', 'newPort', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newPrServSpcodeHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServSpcodeHistNewMapper.xml'], 'newPrServSpcodeHistMapper', 'newPrServSpcodeHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newPrServStatusHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServStatusHistNewMapper.xml'], 'newPrServStatusHistMapper', 'newPrServStatusHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newProfileService(jsonObj, callback) {
            var query = createQuery(['./mapper/ProfileServiceNewMapper.xml'], 'newProfileServiceMapper', 'newProfileService', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        newStorageMedium(jsonObj, callback) {
            var query = createQuery(['./mapper/StorageMediumNewMapper.xml'], 'newStorageMediumMapper', 'newStorageMedium', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesWriteMapper.xml'], 'writeAppAuthoritiesMapper', 'writeAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactWriteMapper.xml'], 'writeAppContactMapper', 'writeAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesWriteMapper.xml'], 'writeAppGroupAuthoritiesMapper', 'writeAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersWriteMapper.xml'], 'writeAppGroupMembersMapper', 'writeAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsWriteMapper.xml'], 'writeAppGroupsMapper', 'writeAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusWriteMapper.xml'], 'writeAppMenusMapper', 'writeAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageWriteMapper.xml'], 'writeAppMessageMapper', 'writeAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsWriteMapper.xml'], 'writeAppPersistentLoginsMapper', 'writeAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomWriteMapper.xml'], 'writeAppRoomMapper', 'writeAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersWriteMapper.xml'], 'writeAppUsersMapper', 'writeAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeCcontactAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CcontactAllWriteMapper.xml'], 'writeCcontactAllMapper', 'writeCcontactAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeContrDevices(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrDevicesWriteMapper.xml'], 'writeContrDevicesMapper', 'writeContrDevices', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeContrServicesCap(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrServicesCapWriteMapper.xml'], 'writeContrServicesCapMapper', 'writeContrServicesCap', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeContractAll(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractAllWriteMapper.xml'], 'writeContractAllMapper', 'writeContractAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeContractHistory(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractHistoryWriteMapper.xml'], 'writeContractHistoryMapper', 'writeContractHistory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeCustomerAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CustomerAllWriteMapper.xml'], 'writeCustomerAllMapper', 'writeCustomerAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeDirectoryNumber(jsonObj, callback) {
            var query = createQuery(['./mapper/DirectoryNumberWriteMapper.xml'], 'writeDirectoryNumberMapper', 'writeDirectoryNumber', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeInfoContrCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrCheckWriteMapper.xml'], 'writeInfoContrCheckMapper', 'writeInfoContrCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeInfoContrCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrComboWriteMapper.xml'], 'writeInfoContrComboMapper', 'writeInfoContrCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeInfoContrText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrTextWriteMapper.xml'], 'writeInfoContrTextMapper', 'writeInfoContrText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeInfoCustCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustCheckWriteMapper.xml'], 'writeInfoCustCheckMapper', 'writeInfoCustCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeInfoCustCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustComboWriteMapper.xml'], 'writeInfoCustComboMapper', 'writeInfoCustCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeInfoCustText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustTextWriteMapper.xml'], 'writeInfoCustTextMapper', 'writeInfoCustText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeOrderhdrAll(jsonObj, callback) {
            var query = createQuery(['./mapper/OrderhdrAllWriteMapper.xml'], 'writeOrderhdrAllMapper', 'writeOrderhdrAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeOrdertrailer(jsonObj, callback) {
            var query = createQuery(['./mapper/OrdertrailerWriteMapper.xml'], 'writeOrdertrailerMapper', 'writeOrdertrailer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writePort(jsonObj, callback) {
            var query = createQuery(['./mapper/PortWriteMapper.xml'], 'writePortMapper', 'writePort', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writePrServSpcodeHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServSpcodeHistWriteMapper.xml'], 'writePrServSpcodeHistMapper', 'writePrServSpcodeHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writePrServStatusHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServStatusHistWriteMapper.xml'], 'writePrServStatusHistMapper', 'writePrServStatusHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeProfileService(jsonObj, callback) {
            var query = createQuery(['./mapper/ProfileServiceWriteMapper.xml'], 'writeProfileServiceMapper', 'writeProfileService', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        writeStorageMedium(jsonObj, callback) {
            var query = createQuery(['./mapper/StorageMediumWriteMapper.xml'], 'writeStorageMediumMapper', 'writeStorageMedium', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppAuthoritiesDeleteMapper.xml'], 'deleteAppAuthoritiesMapper', 'deleteAppAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppContact(jsonObj, callback) {
            var query = createQuery(['./mapper/AppContactDeleteMapper.xml'], 'deleteAppContactMapper', 'deleteAppContact', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroupAuthorities(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupAuthoritiesDeleteMapper.xml'], 'deleteAppGroupAuthoritiesMapper', 'deleteAppGroupAuthorities', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroupMembers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupMembersDeleteMapper.xml'], 'deleteAppGroupMembersMapper', 'deleteAppGroupMembers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppGroups(jsonObj, callback) {
            var query = createQuery(['./mapper/AppGroupsDeleteMapper.xml'], 'deleteAppGroupsMapper', 'deleteAppGroups', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMenus(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMenusDeleteMapper.xml'], 'deleteAppMenusMapper', 'deleteAppMenus', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppMessage(jsonObj, callback) {
            var query = createQuery(['./mapper/AppMessageDeleteMapper.xml'], 'deleteAppMessageMapper', 'deleteAppMessage', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppPersistentLogins(jsonObj, callback) {
            var query = createQuery(['./mapper/AppPersistentLoginsDeleteMapper.xml'], 'deleteAppPersistentLoginsMapper', 'deleteAppPersistentLogins', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppRoom(jsonObj, callback) {
            var query = createQuery(['./mapper/AppRoomDeleteMapper.xml'], 'deleteAppRoomMapper', 'deleteAppRoom', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteAppUsers(jsonObj, callback) {
            var query = createQuery(['./mapper/AppUsersDeleteMapper.xml'], 'deleteAppUsersMapper', 'deleteAppUsers', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteCcontactAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CcontactAllDeleteMapper.xml'], 'deleteCcontactAllMapper', 'deleteCcontactAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteContrDevices(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrDevicesDeleteMapper.xml'], 'deleteContrDevicesMapper', 'deleteContrDevices', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteContrServicesCap(jsonObj, callback) {
            var query = createQuery(['./mapper/ContrServicesCapDeleteMapper.xml'], 'deleteContrServicesCapMapper', 'deleteContrServicesCap', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteContractAll(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractAllDeleteMapper.xml'], 'deleteContractAllMapper', 'deleteContractAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteContractHistory(jsonObj, callback) {
            var query = createQuery(['./mapper/ContractHistoryDeleteMapper.xml'], 'deleteContractHistoryMapper', 'deleteContractHistory', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteCustomerAll(jsonObj, callback) {
            var query = createQuery(['./mapper/CustomerAllDeleteMapper.xml'], 'deleteCustomerAllMapper', 'deleteCustomerAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteDirectoryNumber(jsonObj, callback) {
            var query = createQuery(['./mapper/DirectoryNumberDeleteMapper.xml'], 'deleteDirectoryNumberMapper', 'deleteDirectoryNumber', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteInfoContrCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrCheckDeleteMapper.xml'], 'deleteInfoContrCheckMapper', 'deleteInfoContrCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteInfoContrCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrComboDeleteMapper.xml'], 'deleteInfoContrComboMapper', 'deleteInfoContrCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteInfoContrText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoContrTextDeleteMapper.xml'], 'deleteInfoContrTextMapper', 'deleteInfoContrText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteInfoCustCheck(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustCheckDeleteMapper.xml'], 'deleteInfoCustCheckMapper', 'deleteInfoCustCheck', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteInfoCustCombo(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustComboDeleteMapper.xml'], 'deleteInfoCustComboMapper', 'deleteInfoCustCombo', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteInfoCustText(jsonObj, callback) {
            var query = createQuery(['./mapper/InfoCustTextDeleteMapper.xml'], 'deleteInfoCustTextMapper', 'deleteInfoCustText', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteOrderhdrAll(jsonObj, callback) {
            var query = createQuery(['./mapper/OrderhdrAllDeleteMapper.xml'], 'deleteOrderhdrAllMapper', 'deleteOrderhdrAll', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteOrdertrailer(jsonObj, callback) {
            var query = createQuery(['./mapper/OrdertrailerDeleteMapper.xml'], 'deleteOrdertrailerMapper', 'deleteOrdertrailer', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deletePort(jsonObj, callback) {
            var query = createQuery(['./mapper/PortDeleteMapper.xml'], 'deletePortMapper', 'deletePort', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deletePrServSpcodeHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServSpcodeHistDeleteMapper.xml'], 'deletePrServSpcodeHistMapper', 'deletePrServSpcodeHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deletePrServStatusHist(jsonObj, callback) {
            var query = createQuery(['./mapper/PrServStatusHistDeleteMapper.xml'], 'deletePrServStatusHistMapper', 'deletePrServStatusHist', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteProfileService(jsonObj, callback) {
            var query = createQuery(['./mapper/ProfileServiceDeleteMapper.xml'], 'deleteProfileServiceMapper', 'deleteProfileService', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        deleteStorageMedium(jsonObj, callback) {
            var query = createQuery(['./mapper/StorageMediumDeleteMapper.xml'], 'deleteStorageMediumMapper', 'deleteStorageMedium', jsonObj);
            dbpool.query(query, function (err, rows, fields) {                
                callback(err,rows);
                connector.publish("sensor/admin/post",JSON.stringify(jsonObj));
            });
        }
        
    }
}
