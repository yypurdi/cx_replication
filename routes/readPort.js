/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'PortRead',
    Heading:'Port',
    PortId:{label :'PortId'},
    Plcode:{label :'Plcode'},
    Hlcode:{label :'Hlcode'},
    PortNum:{label :'PortNum'},
    PortStatus:{label :'PortStatus'},
    PortStatusmoddat:{label :'PortStatusmoddat'},
    PortKi:{label :'PortKi'},
    PortKind:{label :'PortKind'},
    PortChannels:{label :'PortChannels'},
    PortChannelsExcl:{label :'PortChannelsExcl'},
    SmId:{label :'SmId'},
    PortSmRequ:{label :'PortSmRequ'},
    SimpohId:{label :'SimpohId'},
    SimpotId:{label :'SimpotId'},
    SimpotBatch:{label :'SimpotBatch'},
    DnId:{label :'DnId'},
    DealerId:{label :'DealerId'},
    PortAssignDate:{label :'PortAssignDate'},
    PortTkey:{label :'PortTkey'},
    PortStatusRequ:{label :'PortStatusRequ'},
    PortStaRequDate:{label :'PortStaRequDate'},
    PortActivDate:{label :'PortActivDate'},
    PortDeactivDate:{label :'PortDeactivDate'},
    PortEntdate:{label :'PortEntdate'},
    PortModdate:{label :'PortModdate'},
    PortUserlastmod:{label :'PortUserlastmod'},
    PreActivated:{label :'PreActivated'},
    SmsUpdate:{label :'SmsUpdate'},
    PortRicBatch:{label :'PortRicBatch'},
    ExternalInd:{label :'ExternalInd'},
    Capacity:{label :'Capacity'},
    AvailableCapacity:{label :'AvailableCapacity'},
    PrmValueId:{label :'PrmValueId'},
    RecVersion:{label :'RecVersion'},
    PortNpcode:{label :'PortNpcode'},
    TransactionId:{label :'TransactionId'},
    BusinessUnitId:{label :'BusinessUnitId'},
    StorageMedium:{Heading:'StorageMedium',
        SmId:{header:'SmId'},
        Plcode:{header:'Plcode'},
        SmcId:{header:'SmcId'},
        SmSerialnum:{header:'SmSerialnum'},
        SmStatus:{header:'SmStatus'},
        SmStatusModDate:{header:'SmStatusModDate'},
        DealerId:{header:'DealerId'},
        SmDeliveryId:{header:'SmDeliveryId'},
        SmDeliveryDate:{header:'SmDeliveryDate'},
        SimpohId:{header:'SimpohId'},
        SimpotId:{header:'SimpotId'},
        SimpotBatch:{header:'SimpotBatch'},
        SmPin:{header:'SmPin'},
        SmPuk:{header:'SmPuk'},
        SmAccControl:{header:'SmAccControl'},
        SmCodeAdm:{header:'SmCodeAdm'},
        SpIdE:{header:'SpIdE'},
        SpIdG:{header:'SpIdG'},
        SmStatusRequ:{header:'SmStatusRequ'},
        SmStaRequDate:{header:'SmStaRequDate'},
        SmEntdate:{header:'SmEntdate'},
        SmModdate:{header:'SmModdate'},
        SmUserlastmod:{header:'SmUserlastmod'},
        SmPin2:{header:'SmPin2'},
        SmPuk2:{header:'SmPuk2'},
        SmAuth:{header:'SmAuth'},
        PiId:{header:'PiId'},
        ExternalInd:{header:'ExternalInd'},
        Vendcode:{header:'Vendcode'},
        SmAdm1:{header:'SmAdm1'},
        SmAdm2:{header:'SmAdm2'},
        SmAdm3:{header:'SmAdm3'},
        SmAdm4:{header:'SmAdm4'},
        SmCodeRetailer:{header:'SmCodeRetailer'},
        SmCodeA:{header:'SmCodeA'},
        SmCodeB:{header:'SmCodeB'},
        SmAuthPending:{header:'SmAuthPending'},
        RecVersion:{header:'RecVersion'},
        SmOrigEsnId:{header:'SmOrigEsnId'},
        PrepaidProfileId:{header:'PrepaidProfileId'},
        RaProcessId:{header:'RaProcessId'},
        TransactionId:{header:'TransactionId'},
        BusinessUnitId:{header:'BusinessUnitId'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readPort?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readPort = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readPort(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchPort');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var storageMedium = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchStorageMedium(jsonObj,function(err,rows) {
                jsonObj.storageMedium = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('PortReadPage',parameter);
    }    
    Promise.all([readPort,storageMedium]).then(sendResult);
});

module.exports = router;
