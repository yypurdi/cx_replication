/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'ContrDevicesRead',
    Heading:'ContrDevices',
    CdId:{label :'CdId'},
    CdSeqno:{label :'CdSeqno'},
    CoId:{label :'CoId'},
    PortId:{label :'PortId'},
    DnId:{label :'DnId'},
    EqId:{label :'EqId'},
    CdStatus:{label :'CdStatus'},
    CdActivDate:{label :'CdActivDate'},
    CdDeactivDate:{label :'CdDeactivDate'},
    CdValidfrom:{label :'CdValidfrom'},
    CdEntdate:{label :'CdEntdate'},
    CdModdate:{label :'CdModdate'},
    CdUserlastmod:{label :'CdUserlastmod'},
    CdSmNum:{label :'CdSmNum'},
    CdChannels:{label :'CdChannels'},
    CdChannelsExcl:{label :'CdChannelsExcl'},
    CdEqNum:{label :'CdEqNum'},
    CdPendingState:{label :'CdPendingState'},
    CdRsId:{label :'CdRsId'},
    CdPlcode:{label :'CdPlcode'},
    Hlcode:{label :'Hlcode'},
    RecVersion:{label :'RecVersion'},
    Port:{Heading:'Port',
        PortId:{header:'PortId'},
        Plcode:{header:'Plcode'},
        Hlcode:{header:'Hlcode'},
        PortNum:{header:'PortNum'},
        PortStatus:{header:'PortStatus'},
        PortStatusmoddat:{header:'PortStatusmoddat'},
        PortKi:{header:'PortKi'},
        PortKind:{header:'PortKind'},
        PortChannels:{header:'PortChannels'},
        PortChannelsExcl:{header:'PortChannelsExcl'},
        SmId:{header:'SmId'},
        PortSmRequ:{header:'PortSmRequ'},
        SimpohId:{header:'SimpohId'},
        SimpotId:{header:'SimpotId'},
        SimpotBatch:{header:'SimpotBatch'},
        DnId:{header:'DnId'},
        DealerId:{header:'DealerId'},
        PortAssignDate:{header:'PortAssignDate'},
        PortTkey:{header:'PortTkey'},
        PortStatusRequ:{header:'PortStatusRequ'},
        PortStaRequDate:{header:'PortStaRequDate'},
        PortActivDate:{header:'PortActivDate'},
        PortDeactivDate:{header:'PortDeactivDate'},
        PortEntdate:{header:'PortEntdate'},
        PortModdate:{header:'PortModdate'},
        PortUserlastmod:{header:'PortUserlastmod'},
        PreActivated:{header:'PreActivated'},
        SmsUpdate:{header:'SmsUpdate'},
        PortRicBatch:{header:'PortRicBatch'},
        ExternalInd:{header:'ExternalInd'},
        Capacity:{header:'Capacity'},
        AvailableCapacity:{header:'AvailableCapacity'},
        PrmValueId:{header:'PrmValueId'},
        RecVersion:{header:'RecVersion'},
        PortNpcode:{header:'PortNpcode'},
        TransactionId:{header:'TransactionId'},
        BusinessUnitId:{header:'BusinessUnitId'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readContrDevices?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readContrDevices = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readContrDevices(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchContrDevices');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var port = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.searchPort(jsonObj,function(err,rows) {
                jsonObj.port = rows;
                resolve(jsonObj);
            });
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('ContrDevicesReadPage',parameter);
    }    
    Promise.all([readContrDevices,port]).then(sendResult);
});

module.exports = router;
