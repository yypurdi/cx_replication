/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var database = require('./dao');
var dao = new database.Dao();
        
/**
 * @swagger
 * /readCustomerAll:
 *   get:
 *     tags:
 *       - Administration
 *     description: readCustomerAll
 *     summary: CustomerAllRead
 *     consumes:
 *       - application/json
 *     produces:
 *       - application/json
 *     parameters: 
 *       - name: customerId
 *         description: Integer 
 *         in: query
 *         type: Integer
 *     responses:
 *       '200':
 *         description: OK
 *       '401':
 *         description: Unauthorized
 *       '403':
 *         description: Forbidden
 *       '404':
 *         description: Not Found 
 *       '500':
 *         description: Internal Server Problem
 */    

router.get('/', function(req, res, next) {
    
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    
    var readCustomerAll = new Promise((resolve, reject) => {
        dao.readCustomerAll(jsonObj,function(err,rows) {
            if(err) res.status(err.code).end();
            else{
                if(rows[0]===undefined) res.status(404).end();
                else{ 
                    jsonObj = rows[0];
                    resolve(jsonObj);
                }
            }
        });
    });
    
    var ccontactAll = new Promise((resolve, reject) => {
        dao.searchCcontactAll(jsonObj,function(err,rows) {
            jsonObj.ccontactAll = rows;
            resolve(jsonObj);
        });        
    });
    
    var contractAll = new Promise((resolve, reject) => {
        dao.searchContractAll(jsonObj,function(err,rows) {
            jsonObj.contractAll = rows;
            resolve(jsonObj);
        });        
    });
    
    var infoCustCheck = new Promise((resolve, reject) => {
        dao.searchInfoCustCheck(jsonObj,function(err,rows) {
            jsonObj.infoCustCheck = rows;
            resolve(jsonObj);
        });        
    });
    
    var infoCustCombo = new Promise((resolve, reject) => {
        dao.searchInfoCustCombo(jsonObj,function(err,rows) {
            jsonObj.infoCustCombo = rows;
            resolve(jsonObj);
        });        
    });
    
    var infoCustText = new Promise((resolve, reject) => {
        dao.searchInfoCustText(jsonObj,function(err,rows) {
            jsonObj.infoCustText = rows;
            resolve(jsonObj);
        });        
    });
    
    var orderhdrAll = new Promise((resolve, reject) => {
        dao.searchOrderhdrAll(jsonObj,function(err,rows) {
            jsonObj.orderhdrAll = rows;
            resolve(jsonObj);
        });        
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        res.status(200).send(jsonObj);
    }
    
    Promise.all([readCustomerAll,ccontactAll,contractAll,infoCustCheck,infoCustCombo,infoCustText,orderhdrAll]).then(sendResult);
});

module.exports = router;
